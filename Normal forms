::::: Normal Forms in DBMS :::::::
Normalization is the process of minimizing redundancy from a relation or set of relations. 
Redundancy in relation may cause insertion, deletion, and update anomalies. 
So, it helps to minimize the redundancy in relations. Normal forms are used to eliminate or reduce redundancy in database tables.



:::: Normalization of DBMS :::::::::
In database management systems (DBMS), normal forms are a series of guidelines that help to ensure that the design of a database is efficient, organized, and free from data anomalies.
There are several levels of normalization, each with its own set of guidelines, known as normal forms.

::::: Important Points Regarding Normal Forms in DBMS ::::::::

First Normal Form (1NF): This is the most basic level of normalization.
In 1NF, each table cell should contain only a single value, and each column should have a unique name. 
The first normal form helps to eliminate duplicate data and simplify queries.

Second Normal Form (2NF): 2NF eliminates redundant data by requiring that each non-key attribute be dependent on the primary key. 
This means that each column should be directly related to the primary key, and not to other columns.

Third Normal Form (3NF): 3NF builds on 2NF by requiring that all non-key attributes are independent of each other.
This means that each column should be directly related to the primary key, and not to any other columns in the same table.

Boyce-Codd Normal Form (BCNF): BCNF is a stricter form of 3NF that ensures that each determinant in a table is a candidate key.
In other words, BCNF ensures that each non-key attribute is dependent only on the candidate key.

Fourth Normal Form (4NF): 4NF is a further refinement of BCNF that ensures that a table does not contain any multi-valued dependencies.

Fifth Normal Form (5NF): 5NF is the highest level of normalization and involves decomposing a table into smaller tables to remove data redundancy and improve data integrity.


Normal forms help to reduce data redundancy, increase data consistency, and improve database performance.
However, higher levels of normalization can lead to more complex database designs and queries.
It is important to strike a balance between normalization and practicality when designing a database.

::::::::: Advantages of Normal Form ::::::

Reduced data redundancy: Normalization helps to eliminate duplicate data in tables, reducing the amount of storage space needed and improving database efficiency.
Improved data consistency: Normalization ensures that data is stored in a consistent and organized manner, reducing the risk of data inconsistencies and errors.
Simplified database design: Normalization provides guidelines for organizing tables and data relationships, making it easier to design and maintain a database.
Improved query performance: Normalized tables are typically easier to search and retrieve data from, resulting in faster query performance.
Easier database maintenance: Normalization reduces the complexity of a database by breaking it down into smaller, more manageable tables, making it easier to add, modify, and delete data.


::::::::Difference Between Fact  table and Dimension table ::::::::::::::
S.NO                          Fact Table                                                              Dimension Tab
1.	Fact table contains the measuring of the attributes of a dimension table|||||||||||	Dimension table contains the attributes on that truth table calculates the metric.
2.	In fact table, There is less attributes than dimension table.|||||||||||||||||||||| While in dimension table, There is more attributes than fact table.
3.	In fact table, There is more records than dimension table.|||||||||||||||||||||||||	While in dimension table, There is less records than fact table.
4.	Fact table forms a vertical table.|||||||||||||||||||||||||||||||||||||||||||||||||	While dimension table forms a horizontal table.
5.	The attribute format of fact table is in numerical format and text format.||||||||| While the attribute format of dimension table is in text format.
6.	It comes after dimension table.	||||||||||||||||||||||||||||||||||||||||||||||||||| While it comes before fact table.
7.	The number of fact table is less than dimension table in a schema.	||||||||||||||| While the number of dimension is more than fact table in a schema.
8.	It is used for analysis purpose and decision making.	||||||||||||||||||||||||||||| While the main task of dimension table is to store the information about a business and its process.


::::::::: Types of Dimensions ::::::::::::::":

There are mainly 10 types of dimensions available

slowly changing dimensions
junk dimensions
Conformed dimensions
Degenerated dimensions
Rapidly changing dimensions
Stacked dimensions
Inferred dimensions
Role Playing dimensions
Shrunken dimensions
Static dimensions
Slowly Changing Dimensions (SCD) - dimensions that change slowly over time, rather than changing on regular schedule, time-base. There are many approaches how to deal with SCD. The most popular are:

Type 1 - Overwriting the old value:

Type 2 - Creating a new additional record

Type 3 - Adding a new column

Rapidly / Fast Changing Dimensions (FCD) - if one or more of its attributes in the table changes very fast and in many rows. Consider patient dimension as an example to it. 
By separating the rapidly changing attributes from the slowly changing ones and move those attribute to another table called junk dimension and maintain the slowly changing attribute in same table. 
Junk Dimensions - is a convenient grouping of typically low-cardinality flags and indicators. 
By creating an abstract dimension as above splitting FCD into Junk, we remove the flags from the fact table while placing them into a useful dimensional framework.
Eg: Stock Data Conformed Dimensions are dimensions that are shared by multiple stars.
its example would be Item, region or location, Datetime dimensions,
i.e. both Inventory and sales department can use such dimension for their reporting purpose.
Eg: Calendar data Degenerate Dimension is when the dimension attribute is stored as part of fact table, and not in a separate dimension table. 
These are essentially dimension keys for which there are no other attributes. 
In a data warehouse, these are often used as the result of a drill through query to analyze the source of an aggregated number in a report. 
You can use these values to trace back to transactions in the OLTP system. For example, receipt number does not have dimension table associated with it. Such details are just for information purpose.


:::::::: Snowflake VS Star Schema ::::::::::::::
******** Star Schema*********: 
Star schema is the simplest method for arranging data in a data warehouse.
It contains a fact table at the center connected to dimension tables around it. 
Star schema is most effective for quick and simple data query execution.

************* Snowflake Schema***********: 
Snowflake schema is a more complex method of storing data in which fact tables, dimension tables and sub-dimension tables are connected through foreign keys. 
Snowflake is most effective for in-depth data query analyses.

Both fact tables and dimension tables are present in a star schema.Dimension tables, sub-dimension tables, and fact tables are all included in a snowflake schema.
Type of Model: The star schema is a top-down type of model.The snowflake schema is a bottom-up type of model.
Space:Star schema uses more space compared to Snowflake Schema.Snowflake schema uses less space comparatively.
Joint Relations: In a star schema, relationships between tables are represented by a single join, resulting in a simple data structure for fast query performance and easy data analysis.The snowflake schema has a complex data structure with multiple levels of relationships between tables, represented by multiple joins. This can make the data structure more difficult to understand and result in slower query performance.
Response Time for Queries:Star schemas have faster query execution times due to a single join of a fact table and its attributes in dimensional tables.Snowflake schemas require complex joins between tables, which can slow down query processing and impact other OLAP products.
Normalization: In a star schema, dimension tables are not organized in a normalized form. They are typically denormalized and contain multiple levels of information about a particular subject in a single table.Dimension tables in snowflake schema are normalized.
Design Complexity: Star schema has simpler design
Query Complexity: Star schemas have simpler query design due to the fact the table is joined to only one level of dimensional tables.Snowflake schemas, on another hand, have a more complex query design due to the need for multiple joins between the fact table and its dimensional tables. This leads to additional overhead in query writing.
Foreign Keys: Have a lesser number of foreign keys.Comparatively has more foreign keys.
Data Redundancy:The star schema stores redundant data in the dimension tables.The snowflake design fully normalizes the dimension tables and prevents data redundancy,
















